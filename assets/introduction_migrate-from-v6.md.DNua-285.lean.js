import{_ as i,c as a,af as e,o as t}from"./chunks/framework.JWorlyEv.js";const n="/assets/migration-workflow.oLxSvWIQ.png",c=JSON.parse('{"title":"Migrate from v6","description":"","frontmatter":{"next":{"text":"Controllers","link":"/docs/controllers"},"meta":[{"name":"description","content":"Migrate Ts.ED application from v6 to v7. Ts.ED is built on top of Express and uses TypeScript language."},{"name":"keywords","content":"migration getting started ts.ed express typescript node.js javascript decorators mvc class models"}],"head":[["link",{"rel":"canonical","href":"https://tsed.dev/introduction/migrate-from-v6.html"}]]},"headers":[],"relativePath":"introduction/migrate-from-v6.md","filePath":"introduction/migrate-from-v6.md","lastUpdated":1737805073000}'),l={name:"introduction/migrate-from-v6.md"};function p(h,s,r,o,k,d){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="migrate-from-v6" tabindex="-1">Migrate from v6 <a class="header-anchor" href="#migrate-from-v6" aria-label="Permalink to &quot;Migrate from v6&quot;">​</a></h1><h2 id="what-s-new" tabindex="-1">What&#39;s new ? <a class="header-anchor" href="#what-s-new" aria-label="Permalink to &quot;What&#39;s new ?&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Topics</th><th>Migration note</th><th>Issue</th></tr></thead><tbody><tr><td>Use virtual router instead of Express or Koa router</td><td><a href="#virtual-router">See</a></td><td><a href="https://github.com/tsedio/tsed/pull/1987" target="_blank" rel="noreferrer">#1987</a></td></tr><tr><td>Remove componentsScan options and any glob pattern to discover services</td><td><a href="#components-scan">See</a></td><td><a href="https://github.com/tsedio/tsed/issues/1503" target="_blank" rel="noreferrer">#1503</a></td></tr><tr><td>Use <a href="/docs/templating.html">@tsed/engines</a> instead of Consolidate</td><td><a href="#template-engines">See</a></td><td><a href="https://github.com/tsedio/tsed/issues/1503" target="_blank" rel="noreferrer">#1503</a></td></tr><tr><td>Remove possibility to register twice handler with the same path + http verb</td><td><a href="#register-twice-handler-for-the-same-route">See</a></td><td><a href="https://github.com/tsedio/tsed/issues/1793" target="_blank" rel="noreferrer">#1793</a></td></tr><tr><td>Change the default value of <code>jsonMapper.disableUnsecureConstructor</code> to <code>true</code></td><td><a href="#jsonmapper-options">See</a></td><td><a href="https://github.com/tsedio/tsed/issues/1942" target="_blank" rel="noreferrer">#1942</a></td></tr><tr><td>Remove <code>ConverterService</code></td><td><a href="#converterservice">See</a></td><td></td></tr><tr><td>Remove <code>export * from @tsed/platform-cache</code> in <code>@tsed/common</code></td><td><a href="#platform-cache">See</a></td><td><a href="https://github.com/tsedio/tsed/pull/1657" target="_blank" rel="noreferrer">#1657</a></td></tr><tr><td>Remove <code>@tsed/async_hook_context</code></td><td><a href="#async-hook-context">See</a></td><td><a href="https://github.com/tsedio/tsed/pull/1860" target="_blank" rel="noreferrer">#1860</a></td></tr><tr><td>OIDC: use <code>/oidc</code> basePath by default</td><td></td><td><a href="https://github.com/tsedio/tsed/pull/1490" target="_blank" rel="noreferrer">#1490</a></td></tr><tr><td>Remove deprecated code/decorators/functions in v6</td><td><a href="#other-breaking-changes">See</a></td><td></td></tr></tbody></table><h2 id="workflow-to-migrate-your-app" tabindex="-1">Workflow to migrate your app <a class="header-anchor" href="#workflow-to-migrate-your-app" aria-label="Permalink to &quot;Workflow to migrate your app&quot;">​</a></h2><p><img src="'+n+`" alt="migration guide" loading="lazy"></p><p>This graph will help you to migrate your application to the v7. Don&#39;t hesitate to give us feedback on <a href="https://github.com/tsedio/tsed/issues" target="_blank" rel="noreferrer">github issues</a>!</p><h2 id="update-cli" tabindex="-1">Update CLI <a class="header-anchor" href="#update-cli" aria-label="Permalink to &quot;Update CLI&quot;">​</a></h2><p>If you use Ts.ED CLI on your project, don&#39;t forget to update all CLI v3 dependencies to v4!</p><h2 id="virtual-router" tabindex="-1">Virtual router <a class="header-anchor" href="#virtual-router" aria-label="Permalink to &quot;Virtual router&quot;">​</a></h2><p>Ts.ED replace the Express.Router and Koa.Router by his own Router. In most cases this will be transparent to you as you are using the Ts.ED controllers and Platform API.</p><h3 id="why" tabindex="-1">Why ? <a class="header-anchor" href="#why" aria-label="Permalink to &quot;Why ?&quot;">​</a></h3><p>This change will make it easier to integrate other frameworks like fastify and Hapi that don&#39;t have a nested router.</p><p>With Express you can create nested routers to compose your routes. What could be practical in a pure Express Application. With Ts.ED the use is limited or even transparent.</p><p>Hapi and Fastify only support a list of routes with full paths.</p><p>In fact, it is much simpler for Ts.ED to generate this list of flat routes and then map the routes/handlers to the target framework rather than managing each framework&#39;s nested routers! (Koa router is a real nightmare).</p><h3 id="potential-issue" tabindex="-1">Potential issue <a class="header-anchor" href="#potential-issue" aria-label="Permalink to &quot;Potential issue&quot;">​</a></h3><p>There is a scenario where you may run into problems if you inject PlatformRouter into your controller to dynamically create your routes.</p><p>Here is the example:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {PlatformRouter} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/platform-router&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// in v6 import {PlatformRouter} from &quot;@tsed/common&quot;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Controller} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/di&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/calendars&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarCtrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.myMethod.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // GET raw router (Express.Router or Koa.Router)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v7 removed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// removed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(router.raw); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// return PlatformRouter itself intead Express.Router</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  myMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="components-scan" tabindex="-1">Components scan <a class="header-anchor" href="#components-scan" aria-label="Permalink to &quot;Components scan&quot;">​</a></h2><p>ComponentsScan is an option to import services using a glob pattern. It&#39;s pretty useful when you start new application.</p><p>But this option can cause some issues or misunderstood:</p><ul><li>When you change a location for a Controller/Service/Modules, the code isn&#39;t discovered as expected. It&#39;s normal, they server have default configuration like <code>**/services/**/*.ts</code>. if the code is outside of this pattern, the won&#39;t be loaded.</li><li>Performance issue. The global pattern have a huge impact on the server bootstrap!</li><li>Isn&#39;t compatible with Webpack or any bundler because the code imported dynamically.</li><li>Importing dynamically code using glob pattern in production may be a breach exploitable by hackers to inject code.</li></ul><p>This is why I decided to replace the componentsScan by another tools named <code>barrelsby</code>. The latest CLI version install barrelsby on fresh project. This tool use globpattern to generate an index files (barrel file) with all controllers. This tool isn&#39;t invoked a the runtime but before when you build the code or you invoke the NPM script to generates barrels.</p><p>It&#39;s maybe less magical, but it solves all previous described issues encountered with the <code>componentsScan</code>.</p><p>You can try this tool by generate a project with <code>tsed init .</code>. In the new project you&#39;ll have a new NPM task <code>barrels</code> to generate barrels files. You can customize easily the barrelsby configuration to generate multiple barrels file at different levels of your project!</p><p>Here is the main points about barrelsby usage in a Ts.ED project:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yarn run barrels &amp;&amp; yarn run tsc --project tsconfig.compile.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;barrels&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;barrelsby --config .barrelsby.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yarn run barrels &amp;&amp; tsnd --inspect --ignore-watch node_modules --respawn --transpile-only -r tsconfig-paths/register src/index.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>.barrelsby.json</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;directory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/controllers/rest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__mock__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__mocks__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.spec.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;delete&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This configuration generate index.ts file with the following contents:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@file</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> Automatically generated by barrelsby.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./HelloWorldController&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./UserController&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>And we can use it as following:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./controllers/rest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mount: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;/rest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="known-issue-with-barrelsby" tabindex="-1">Known issue with barrelsby <a class="header-anchor" href="#known-issue-with-barrelsby" aria-label="Permalink to &quot;Known issue with barrelsby&quot;">​</a></h3><p>Actually, Barrelsby doesn&#39;t support ESM module. But an issue is already opened <a href="https://github.com/bencoveney/barrelsby/issues/178" target="_blank" rel="noreferrer">here</a> to support it!</p><h3 id="keep-the-componentsscan" tabindex="-1">Keep the componentsScan <a class="header-anchor" href="#keep-the-componentsscan" aria-label="Permalink to &quot;Keep the componentsScan&quot;">​</a></h3><p>To facilitate your migration, you can install the <code>@tsed/components-scan</code> module. This module does exactly the same as what you have in v6</p><p>Here is the right way to use the <code>componentsScan</code> since v6.104.0:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {$log} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/common&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {importProviders} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/components-scan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {PlatformExpress} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/platform-express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Server} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./Server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scannedProviders</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> importProviders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mount: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;/rest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/**/controllers/**/*.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      imports: [__dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/**/services/**/*.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, __dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/**/protocols/**/*.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PlatformExpress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Server, {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scannedProviders</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SIGINT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      platform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    $log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({event: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SERVER_BOOTSTRAP_ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="template-engines" tabindex="-1">Template Engines <a class="header-anchor" href="#template-engines" aria-label="Permalink to &quot;Template Engines&quot;">​</a></h2><p>Consolidate is a perfect wrapper to support multiples engines, but It doesn&#39;t provide API to adding new Engines. And the package is no longer actively maintained.</p><p>Ts.ED Engines provide a set of engines and let you use decorators to implement your custom engine:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Engine, ViewEngine} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/engines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  requires: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;then-pug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// multiple require is possible. Ts.ED will use the first module resolved from node_modules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PugEngine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  protected</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(template, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $compileFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.engine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file, options);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>By this way, you&#39;ll be able to use it with Ts.ED (server or CLI) to compile and render your template.</p><p>For example, Ts.ED engines support Vite as View engine!! <a href="https://github.com/tsedio/tsed-example-vite" target="_blank" rel="noreferrer">See more here</a>.</p><p>Ts.ED engines is already integrated to v6. You can now switch your project to this library and open issues if you have any problems.</p><p>For more details about engine configuration with Ts.ED, see our dedicated <a href="/docs/templating.html">page</a>.</p><h2 id="register-twice-handler-for-the-same-route" tabindex="-1">Register twice handler for the same route <a class="header-anchor" href="#register-twice-handler-for-the-same-route" aria-label="Permalink to &quot;Register twice handler for the same route&quot;">​</a></h2><p>One of the possibilities given by express.js is to be able to register two routes for the same http path and verb.</p><p>For example, you can do that:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mypath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myHandler1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mypath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myHandler2);</span></span></code></pre></div><p>Ts.ED allowed to do the same thing with controllers in v6:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mypath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/mypath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>But this principle leads to unexpected behavior and causes a regression when using an Error type middleware with UseAfter. This problem is reported in the <a href="https://github.com/tsedio/tsed/issues/1793" target="_blank" rel="noreferrer">#1793</a>.</p><p>With v7, adding more handlers for the same path and http verb is no longer possible. Also, this behavior is specific to Express and Koa but doesn&#39;t seem to be possible with Fastify and Hapi.js.</p><h2 id="jsonmapper-options" tabindex="-1">JsonMapper options <a class="header-anchor" href="#jsonmapper-options" aria-label="Permalink to &quot;JsonMapper options&quot;">​</a></h2><p>Introduced recently in v6, the <code>jsonMapper.disableInsecureConstructor</code> option let you remove an insecure behavior in the <code>deserialize</code> function used by Ts.ED. This problem is described in <a href="https://github.com/tsedio/tsed/issues/1942" target="_blank" rel="noreferrer">#1942</a> issue.</p><p>This security issue is only available if you implement a constructor in your model like this:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// potential prototype pollution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This constructor expose you app to a potential prototype pollution hacking!</p><p>Since v6, it&#39;s recommended to set <code>jsonMapper.disableInsecureConstructor</code> to <code>true</code>. In v7, this option is by default to <code>true</code>, but you can revert it, in order to allow you the possibility of migrating smoothly your application.</p><h2 id="converterservice" tabindex="-1">ConverterService <a class="header-anchor" href="#converterservice" aria-label="Permalink to &quot;ConverterService&quot;">​</a></h2><p>The ConverterService finally bows out and gives way to its functional version widely used in v6. The migration is quite simple:</p><p>Before:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {ConverterService} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/common&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Inject, Injectable} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/di&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  mapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConverterService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  doSomething1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client, {type: Client});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  doSomething2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client, {type: Client});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>After (v6/v7):</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {serialize, deserialize} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/json-mapper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Inject, Injectable} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/di&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  doSomething1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> serialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client, {type: Client});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  doSomething2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client, {type: Client});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="platform-cache" tabindex="-1">Platform Cache <a class="header-anchor" href="#platform-cache" aria-label="Permalink to &quot;Platform Cache&quot;">​</a></h2><p>In v6, all decorators from <code>@tsed/platform-cache</code> are re-exported under <code>@tsed/common</code>. But most of the time you don&#39;t use this part.</p><p>In v7, you need to install <code>@tsed/platform-cache</code> as a dependency of your project and make the following replacements:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import {Injectable} from &quot;@tsed/di&quot;;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- import {UseCache} from &quot;@tsed/common&quot;;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ import {UseCache} from &quot;@tsed/platform-cache&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Injectable()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export class MyService {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @UseCache()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="async-hook-context" tabindex="-1">Async hook context <a class="header-anchor" href="#async-hook-context" aria-label="Permalink to &quot;Async hook context&quot;">​</a></h2><p>The <a href="/docs/request-context.html#asynchook-context"><code>@tsed/async-hook-context</code></a> was introduced in v6 to support a context Request injectable everywhere in your code.</p><p>The module is now stable and is directly integrated into the <code>@tsed/di</code> module. The changes are as follows:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- import {Injectable, Controller} from &quot;@tsed/di&quot;;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- import {InjectContext} from &quot;@tsed/async-hook-context&quot;;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ import {Injectable, Controller, runInContext, InjectContext} from &quot;@tsed/di&quot;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import {PlatformContext} from &quot;@tsed/common&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Injectable()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export class CustomRepository {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @InjectContext()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  protected $ctx?: PlatformContext;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  async findById(id: string) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    this.ctx?.logger.info(&quot;Where are in the repository&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      headers: this.$ctx?.request.headers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>And in your test:</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">- import {runInContext} from &quot;@tsed/async-hook-context&quot;;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+ import {runInContext} from &quot;@tsed/di&quot;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import {PlatformContext} from &quot;@tsed/common&quot;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import {CustomRepository} from &quot;./CustomRepository&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">describe(&quot;CustomRepository&quot;, () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  beforeEach(() =&gt; PlatformTest.create());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  afterEach(() =&gt; PlatformTest.reset());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  it(&quot;should run method with the ctx&quot;, async () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const ctx = PlatformTest.createRequestContext();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const service = PlatformTest.get&lt;CustomRepository&gt;(CustomRepository);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.request.headers = {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &quot;x-api&quot;: &quot;api&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const result = await runInContext(ctx, () =&gt; service.findById(&quot;id&quot;));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expect(result).toEqual({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id: &quot;id&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      headers: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &quot;x-api&quot;: &quot;api&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="removed-packages" tabindex="-1">Removed packages <a class="header-anchor" href="#removed-packages" aria-label="Permalink to &quot;Removed packages&quot;">​</a></h2><p>The following Ts.ED packages are removed:</p><ul><li><code>@tsed/graphql</code>: Use <code>@tsed/typegraphql</code> instead.</li><li><code>@tsed/seq</code>: Use the <code>@tsed/logger-seq</code> instead.</li><li><code>@tsed/aws</code>: Use <code>@tsed/serverless-http</code> instead.</li></ul><h2 id="other-breaking-changes" tabindex="-1">Other breaking changes <a class="header-anchor" href="#other-breaking-changes" aria-label="Permalink to &quot;Other breaking changes&quot;">​</a></h2><h3 id="tsed-core" tabindex="-1">@tsed/core <a class="header-anchor" href="#tsed-core" aria-label="Permalink to &quot;@tsed/core&quot;">​</a></h3><ul><li>Remove <code>deepExtends</code> util. Use <code>deepMerge</code> instead.</li></ul><h3 id="tsed-common" tabindex="-1">@tsed/common <a class="header-anchor" href="#tsed-common" aria-label="Permalink to &quot;@tsed/common&quot;">​</a></h3><ul><li>Remove Node.js 12 support.</li><li>Rename <code>useCtxHandler</code> function. Use <code>useContextHandler</code> instead. It&#39;s an internal feature used by official Ts.ED plugin.</li><li>Remove <code>HttpsServer</code> symbol and use <code>Https.Server</code> from <code>https</code> module as injectable type instead.</li><li>Remove <code>HttpServer</code> symbol and use <code>Http.Server</code> from <code>https</code> module as injectable type instead.</li><li>Remove <code>PropertyMetadata</code>. Use <code>JsonEntityStore</code> instead from <code>@tsed/schema</code>.</li><li>Remove <code>UseParam(paramType, options)</code> signature. Use <code>UseParam({paramType: &#39;BODY&#39;, ...options})</code> signature instead.</li><li>Remove <code>ResponseData</code> decorator. Use <code>@Context() $ctx: Context</code> then <code>$ctx.data</code>.</li><li>Remove <code>EndpointInfo</code> decorator. Use <code>@context() $ctx: Context</code> then <code>$ctx.endpoint</code> to retrieve endpoint information.</li><li>Remove <code>Remove GlobalAcceptMimesMiddleware</code> and <code>AcceptMimesMiddleware</code>. Use <code>PlatformAcceptMimesMiddleware</code> instead.</li></ul><h3 id="tsed-di" tabindex="-1">@tsed/di <a class="header-anchor" href="#tsed-di" aria-label="Permalink to &quot;@tsed/di&quot;">​</a></h3><ul><li>Remove <code>registerFactory</code>. Use <code>registerProvider</code> instead.</li><li>Remove <code>loadInjector</code> util. Use <code>injector.load(container, module)</code> instead.</li></ul><h3 id="tsed-schema" tabindex="-1">@tsed/schema <a class="header-anchor" href="#tsed-schema" aria-label="Permalink to &quot;@tsed/schema&quot;">​</a></h3><ul><li>Remove <code>IAuth</code> interface on <code>AuthOptions</code>. Use <code>@Security()</code> and <code>@Returns()</code> instead to configuration authorization option for swagger documentation.</li></ul><h3 id="tsed-platform-middlewares" tabindex="-1">@tsed/platform-middlewares <a class="header-anchor" href="#tsed-platform-middlewares" aria-label="Permalink to &quot;@tsed/platform-middlewares&quot;">​</a></h3><ul><li>Remove <code>IMiddleware</code>. Use <code>MiddlewareMethods</code> instead.</li></ul><h3 id="tsed-platform-express" tabindex="-1">@tsed/platform-express <a class="header-anchor" href="#tsed-platform-express" aria-label="Permalink to &quot;@tsed/platform-express&quot;">​</a></h3><ul><li>Remove <code>CaseSensitive</code>, <code>MergeParams</code>, <code>RouterSettings</code> and <code>Strict</code> decorators. Those decorators no longer make sense with Ts.ED&#39;s Virtual Router.</li></ul><h3 id="tsed-components-scan" tabindex="-1">@tsed/components-scan <a class="header-anchor" href="#tsed-components-scan" aria-label="Permalink to &quot;@tsed/components-scan&quot;">​</a></h3><ul><li>Remove importComponent function.</li></ul><h3 id="tsed-oidc-provider" tabindex="-1">@tsed/oidc-provider <a class="header-anchor" href="#tsed-oidc-provider" aria-label="Permalink to &quot;@tsed/oidc-provider&quot;">​</a></h3><ul><li>Default value for <code>oidc.path</code> is <code>/oidc</code>.</li></ul><h3 id="tsed-passport" tabindex="-1">@tsed/passport <a class="header-anchor" href="#tsed-passport" aria-label="Permalink to &quot;@tsed/passport&quot;">​</a></h3><ul><li>Remove <code>IProtocol</code>. Use <code>ProtocolMethods</code> instead.</li></ul><h3 id="tsed-mikro-orm" tabindex="-1">@tsed/mikro-orm <a class="header-anchor" href="#tsed-mikro-orm" aria-label="Permalink to &quot;@tsed/mikro-orm&quot;">​</a></h3><ul><li>Remove <code>MikroOrmRegistry.closeConnections()</code>. Use <code>MikroOrmRegistry.clear()</code> instead.</li><li>Remove <code>MikroOrmRegistry.createConnection()</code>. Use <code>MikroOrmRegistry.register()</code> instead.</li><li>Remove <code>DBContext.getContext()</code>. Use <code>DBContext.entries()</code> instead.</li><li>Remove <code>TransactionOptions.connectionName</code> property. Use <code>TransactionOptions.contextName</code> instead.</li><li>Remove <code>@Connection</code> decorator. Use <code>@Orm</code> instead.</li></ul><h3 id="tsed-mongoose" tabindex="-1">@tsed/mongoose <a class="header-anchor" href="#tsed-mongoose" aria-label="Permalink to &quot;@tsed/mongoose&quot;">​</a></h3><ul><li>Remove <code>MongooseVirtualRefOptions.type</code>. Use Remove <code>MongooseVirtualRefOptions.ref</code> instead.</li></ul><h3 id="tsed-terminus" tabindex="-1">@tsed/terminus <a class="header-anchor" href="#tsed-terminus" aria-label="Permalink to &quot;@tsed/terminus&quot;">​</a></h3><ul><li>Remove BeforeShutdown, OnSignal, OnShutdown, OnSendFailureDuringShutdown decorators. Use followings instead <code>$beforeShutdown</code>, <code>$onSignal</code>, <code>$onSignal</code>, <code>$onShutdown</code> or <code>$onSendFailureDuringShutdown</code>.</li></ul>`,106)]))}const g=i(l,[["render",p]]);export{c as __pageData,g as default};
